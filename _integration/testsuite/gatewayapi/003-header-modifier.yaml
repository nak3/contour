# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-filter

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-filter

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-nofilter

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-nofilter

---

apiVersion: networking.x-k8s.io/v1alpha1
kind: Gateway
metadata:
  name: contour
  namespace: projectcontour
spec:
  gatewayClassName: contour-class
  listeners:
    - protocol: HTTP
      port: 80
      routes:
        kind: HTTPRoute
        namespaces:
          from: All
        selector:
          matchLabels:
            app: filter

---

apiVersion: networking.x-k8s.io/v1alpha1
kind: HTTPRoute
metadata:
  name: http-filter-1
  labels:
    app: filter
spec:
  hostnames:
    - prefilter.projectcontour.io
  rules:
    - matches:
      - path:
          type: Prefix
          value: /
      filters:
      - type: RequestHeaderModifier
        requestHeaderModifier:
          set:
            My-Header: Foo
          remove:
            - Other-Header
      forwardTo:
      - serviceName: echo-header-filter
        port: 80

---

#apiVersion: networking.x-k8s.io/v1alpha1
#kind: HTTPRoute
#metadata:
#  name: http-filter-2
#  labels:
#    app: filter
#spec:
#  hostnames:
#    - postfilter.projectcontour.io
#  rules:
#    - matches:
#      - path:
#          type: Prefix
#          value: /filter
#      forwardTo:
#      - serviceName: echo-header-filter
#        port: 80
#        filters:
#        - type: RequestHeaderModifier
#          requestHeaderModifier:
#            set:
#              My-Header: Foo
#            remove:
#              - Other-Header
#    - matches:
#      - path:
#          type: Prefix
#          value: /nofilter
#      forwardTo:
#      - serviceName: echo-header-nofilter
#        port: 80

---

#apiVersion: networking.x-k8s.io/v1alpha1
#kind: HTTPRoute
#metadata:
#  name: http-filter-3
#  labels:
#    app: filter
#spec:
#  hostnames:
#    - hostrewrite.projectcontour.io
#  rules:
#    - matches:
#      - path:
#          type: Prefix
#          value: /
#      filters:
#      - type: RequestHeaderModifier
#        requestHeaderModifier:
#          add:
#            Host: rewritten.com
#      forwardTo:
#      - serviceName: echo-header-exact
#        port: 80

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect
import data.contour.http.response
import data.builtin.result

Response := client.Get({
  "method": "GET",
  "url": url.http("/"),
  "headers": {
    "Host": "prefilter.projectcontour.io",
    "Other-Header": "Remove",
    "User-Agent": client.ua("request-header-filter"),
  }
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}

check_for_host_header_set [msg] {
  msg := expect.response_header_is(Response, "My-Header", "Foo")
}

check_for_host_header_remove [msg] {
  msg := expect.response_header_does_not_have(Response, "Other-Header")
}

#---
#
#import data.contour.http.client
#import data.contour.http.client.url
#import data.contour.http.expect
#import data.contour.http.response
#import data.builtin.result
#
#cases := {
#  { "path": "filter", "set_value": "Foo", "remove_value": "", "status": 200, "service": "echo-header-filter" },
#  { "path": "nofilter", "set_value": "Foo", "remove_value": "Remove", "status": 200, "service": "echo-header-nofilter" },
#}
#
#requests[{ "req": req, "wanted_status": status, "wanted_service": service, "wanted_set_header": set_header, "wanted_rm_header": rm_header }] {
#  case := cases[_]
#
#  req := {
#    "method": "GET",
#    "url": url.http(sprintf("/%s", [case.path])),
#    "headers": {
#      "Host": "postfilter.projectcontour.io",
#      "Other-Header": "Remove",
#      "User-Agent": client.ua("request-header-filter"),
#    }
#  }
#
#  set_header := case.set_value
#  rm_header := case.remove_value
#  status := case.status
#  service := case.service
#}
#
#check_for_status_code [msg] {
#  req := requests[_]
#  resp := http.send(req.req)
#  msg := expect.response_status_is(resp, req.wanted_status)
#}
#
#check_for_service_routing [msg] {
#  req := requests[_]
#  resp := http.send(req.req)
#  msg := expect.response_service_is(resp, req.wanted_service)
#}
#
#check_for_host_header_set [msg] {
#  req := requests[_]
#  response_body := response.body(req.req)
#  response_header := object.get(response_body, "My-Header", "")
#  response_header != req.wanted_set_header
#  msg := result.Errorf("response header for my-header was set to %s", [response_header])
#}
#
#check_for_host_header_remove [msg] {
#  req := requests[_]
#  response_body := response.body(req.req)
#  response_header := object.get(response_body, "Other-Header", "")
#  response_header != req.wanted_rm_header
#  msg := result.Errorf("response header for other-header was set to %s", [response_header])
#}
#
#---
#
#import data.contour.http.client
#import data.contour.http.client.url
#import data.contour.http.expect
#import data.contour.http.response
#import data.builtin.result
#
#Response := client.Get({
#  "url": url.http("/echo"),
#  "headers": {
#    "Host": "hostrewrite.projectcontour.io",
#    "User-Agent": client.ua("host-rewrite-test"),
#  },
#})
#
#check_for_status_code [msg] {
#  msg := expect.response_status_is(Response, 200)
#}
#
#check_for_host_header [msg] {
#  response_body := response.body(Response)
#  response_host := object.get(response_body, "Host", "")
#  response_host != "rewritten.com"
#  msg := result.Errorf("expected response host %s to be rewritten to rewritten.com", [response_host])
#}
